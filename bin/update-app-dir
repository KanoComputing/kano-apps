#!/usr/bin/env python
#
# update-app-dir
#
# Copyright (C) 2014, 2015 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#
# Generates desktop entries in /usr/share/applications for all apps in
# /usr/share/kano-applications and /usr/local/share/kano-applications
#

import sys
import os
import codecs

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path = [dir_path] + sys.path

from kano_apps.AppData import get_applications, LOCALE_KEY
from kano.logging import logger
from kano_apps.utils import get_dpkg_dict

_DENTRIES_LOC = "/usr/share/applications/"
_ICONS_LOC = "/usr/share/icons/Kano/66x66/"


def create_desktop_entry(app):
    cmd = app["launch_command"]
    icon = app["icon"]

    def get_localised_entries(key, entry_name):
        entries = u"{entry_name}={val}".format(
            entry_name=entry_name,
            val=app[key]
        )

        if LOCALE_KEY in app:
            entries = u'\n'.join(
                [entries] +
                [
                    u'{entry_name}[{locale}]={val}'.format(
                        entry_name=entry_name,
                        locale=locale,
                        val=transl['title']
                    ) for locale, transl
                    in app[LOCALE_KEY].iteritems()
                ]
            )

        return entries

    names = get_localised_entries('title', 'Name')
    comments = get_localised_entries('tagline', 'Comment')
    categories = ";".join(app["categories"] + [""]).lower()

    de = u'\n'.join([
        "[Desktop Entry]",
        "Encoding=UTF-8",
        "Version=1.0",
        "Type=Application",
        "Exec={}".format(cmd),
        "Icon={}".format(icon),
        "Terminal=false",
        names,
        comments,
        "Categories={}".format(categories),
        ''
    ])

    if "mime_type" in app:
        de += "MimeType={}\n".format(app["mime_type"])

    # Startup_notify allows us to control the hourglass through kdesk,
    # on some rare cases where openbox fails.
    # Set it to "false" lowercase in such cases.
    if "StartupNotify" in app:
        de += "StartupNotify={}\n".format(app["StartupNotify"])

    return de


def _get_dentry_filename(app):
    return "auto_" + app["slug"] + ".desktop"


def main(dry_run=False):
    installed_packages = get_dpkg_dict(include_unpacked=True)[0]

    entries = get_applications(parse_cmds=False, all_locales=True)
    apps = []
    for e in entries.itervalues():
        if e.get("type") == "app":
            apps.append(e)

    # Remove unused ones
    apps_dentries = map(lambda a: _get_dentry_filename(a), apps)
    for de in os.listdir(_DENTRIES_LOC):
        if de[-8:] != ".desktop":
            continue

        if de[0:5] == "auto_" and de not in apps_dentries:
            logger.info("Removing desktop entry {}".format(de))
            if not dry_run:
                os.unlink(os.path.join(_DENTRIES_LOC, de))
            continue

        # Remove if the packages are not installed
        if de[0:5] == 'auto_':
            app_name = ".".join(de[5:].split('.')[:-1])
            for app in apps:
                if app['slug'] == app_name:
                    pkgs = app['packages'] + app['dependencies']
                    for pkg in pkgs:
                        if pkg not in installed_packages:
                            logger.info("Removing desktop entry {} (packages not installed)".format(de))
                            if not dry_run:
                                os.unlink(os.path.join(_DENTRIES_LOC, de))


    # Regenerate all others
    for app in apps:
        pkgs = app['packages'] + app['dependencies']
        skip = False
        for pkg in pkgs:
            if pkg not in installed_packages:
                skip = True
        if skip:
            logger.info("Skipping {}, packages not installed".format(app["title"]))
            continue

        logger.info("Generating a desktop entry for {}".format(app["title"]))

        de = create_desktop_entry(app)
        file_name = _get_dentry_filename(app)

        if dry_run:
            print '>>> App found:', app
            print '>>> Filename:', file_name
            print '>>> Settings .desktop\n'
            print de.encode('utf8')
        else:
            try:
                with codecs.open(os.path.join(_DENTRIES_LOC, file_name), 'w', 'utf-8') as f:
                    f.write(de)
            except IOError as err:
                logger.error("Unable to write to {}".format(_DENTRIES_LOC))
                logger.error(str(err))

    return 0

if __name__ == "__main__":
    '''
    Pass "--dry-run" as first parameter to explain what would be done, but nothing wil change.
    $ python update-add-dir | grep ">>> Filename" will dump a list of would-be-affected desktop files.
    '''

    dry_run=False

    if len(sys.argv) > 1 and sys.argv[1] == '--dry-run':
        print 'Running in dry-run mode (no changes will be applied)'
        dry_run=True

    sys.exit(main(dry_run))
