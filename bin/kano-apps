#!/usr/bin/env python

# kano-apps
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#

import os
import sys
import argparse
import json

from kano.profiling import declare_timepoint

declare_timepoint("load", isStart=True)

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path = [dir_path] + sys.path

from kano_apps.AppManage import download_app, install_app, \
    install_link_and_icon, query_for_app, AppDownloadError
from kano_apps.AppData import get_applications
from kano.logging import logger


def batch_install(apps, icon_only=False):
    for app in apps:
        app_data_file, app_icon_file = download_app(app)

        with open(app_data_file) as f:
            app_data = json.load(f)

        success = True
        if not icon_only:
            success = install_app(app_data, gui=False)

        if success:
            # write out the tmp json
            with open(app_data_file, "w") as f:
                f.write(json.dumps(app_data))

            install_link_and_icon(app_data["slug"], app_data_file,
                                  app_icon_file)


def args_parse():
    if len(sys.argv) >= 2:
        desc = "An application hub for Kano OS."
        parser = argparse.ArgumentParser(description=desc)
        parser.set_defaults(cmd=None)
        subparsers = parser.add_subparsers(dest="cmd")

        install_help = "Use this to install applications"
        install = subparsers.add_parser("install", help=install_help)

        install.add_argument("--no-gui", dest="gui", action="store_const",
                             const=False, default=True,
                             help="Run without the GUI")
        install.add_argument("--icon-only", dest="icon_only",
                             action="store_const", const=True, default=False,
                             help="Install just the app icon")
        install.add_argument("apps", metavar="APP", type=str, nargs="+",
                             help="A list of applications to install")

        update_help = "Check for possible updates of all installed applications"
        subparsers.add_parser("check-for-updates", help=update_help)

        return parser.parse_args()


def main():
    declare_timepoint("load", isStart=False)

    declare_timepoint("run", isStart=True)
    args = args_parse()
    if args is not None and args.cmd == "install":
        if args.gui:
            from gi.repository import Gtk
            from kano_apps.MainWindow import MainWindow
            from kano.gtk3.scrolled_window import ScrolledWindow

            win = MainWindow(install=args.apps, icon_only=args.icon_only)
            ScrolledWindow.apply_styling_to_screen(wide=True)

            win.show_all()
            Gtk.main()
        else:
            batch_install(args.apps, icon_only=args.icon_only)
    elif args is not None and args.cmd == "check-for-updates":
        # Check all the apps for updates
        batch = []

        if os.getuid() != 0:
            logger.warn('Root permissions are required to mark apps for update')

        for app_data in get_applications(parse_cmds=False):
            if "id" in app_data and "_install" not in app_data:
                batch.append(app_data)

        n = 0
        for old_app_data in batch:
            try:
                logger.info("Checking {}".format(old_app_data['slug']))
                new_app_data = query_for_app(old_app_data['id'])

                keys_to_check = ['colour', 'dependencies', 'packages',
                                 'overrides', 'description', 'tagline',
                                 'title', 'overrides']

                for key in keys_to_check:
                    if old_app_data[key] != new_app_data[key]:
                        logger.info("Can be updated")
                        old_app_data['_update'] = True
                        n += 1

                        try:
                            with open(old_app_data['origin'], 'w') as f:
                                del old_app_data['origin']
                                del old_app_data['type']
                                json.dump(old_app_data, f)
                        except IOError as err:
                            msg = 'The {} app '.format(old_app_data['slug']) + \
                                  'couldn\'t be marked for update'
                            logger.warn(msg)
                            logger.warn(str(err))

                        break

            except AppDownloadError:
                # Ignore apps that no longer exist
                pass

        logger.info('{} apps can be updated'.format(n))
    else:
        # GTK is imported only if we're running in GUI mode
        from gi.repository import Gtk
        from kano_apps.MainWindow import MainWindow
        from kano.gtk3.scrolled_window import ScrolledWindow

        win = MainWindow()
        ScrolledWindow.apply_styling_to_screen(wide=True)
        win.show_all()
        Gtk.main()

    declare_timepoint("run", isStart=False)

    return 0

if __name__ == '__main__':
    sys.exit(main())
